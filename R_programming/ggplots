---
title: "Untitled"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

Section A
```{r}
#Q0
load(file = "Florea_dfs_dataset_March_2016.RData")

x2 <- x 
x2$dfsname <- as.factor(x2$dfsname)

```

```{r}
#Q1

boxplot(x2$duration)
library(ggplot2)
ggplot(x2, mapping = aes(y = duration)) + geom_boxplot()

```

```{r}
#Q2

ggplot(x2, mapping = aes(x = dfsname, y = duration)) + geom_boxplot()

#The y axis hasnt changed but the x axis now shows individual plots for each state rather than just one cumalative once

```

```{r}
#Q3 
ggplot(x2, mapping = aes(x = dfsname, y = duration)) + geom_boxplot(notch = TRUE) 
#Their shape represents whether the median is statistcially significant or not at 95 percent confidence level
```

```{r}
#Q4

ggplot(data = x2) + geom_boxplot(mapping = aes(y = duration), outliers = FALSE)

ggplot(data = x2, mapping = aes(y = duration)) + geom_boxplot(outliers = TRUE, outlier.shape = 23)

ggplot(data = x2, mapping = aes(x = dfsname,y = duration)) + geom_boxplot(outliers = TRUE, outlier.shape = 23, outlier.colour = "red")

#Removed the x variable for better visualization 

```

```{r}
#Q5

ggplot(x2, mapping = aes(x = duration, y = dfsname)) + geom_boxplot()
ggplot(x2, mapping = aes(x = dfsname, y = duration)) + geom_boxplot() + coord_flip()

```

```{r}
#Q6

ggplot(x2, mapping = aes(x = dfsname, y = duration)) + geom_boxplot(fill = "aquamarine", color = "black") + coord_flip()

#Q7
ggplot(x2, mapping = aes(x = dfsname, y = duration)) + geom_boxplot(fill = "aquamarine", color = "black") + coord_flip() + geom_point()

```

```{r}
#Q8
ggplot(x2, mapping = aes(x = dfsname, y = duration)) + coord_flip() + geom_violin()

#Q9
x2$fail <- as.factor(x2$fail)


p1 <- ggplot(x2, mapping = aes(x = dfsname, y = duration)) + geom_violin(fill = "aquamarine", color = "black")+ geom_jitter() + coord_flip() + facet_wrap(~fail, scales = "free") + theme_dark()
p1

```
```{r}
#Q10
ggsave(filename = "X2.png", plot = p1, width = 5, height = 8)

```

Section B
```{r}
#Q11
dataset_tourism <- read.delim("Data Set 3.tab")

#Q12
ggplot(data = dataset_tourism) + geom_point(mapping = aes(x = Age, y = AnnualIncome))
```
```{r}
#Q13
ggplot(data = dataset_tourism, mapping = aes(x = Age, y = AnnualIncome, colour = "red")) + geom_point() + geom_jitter()

#Q14

ggplot(data = dataset_tourism, mapping = aes(x = Age, y = AnnualIncome, colour = "red")) + geom_point() + geom_jitter(width = 0.2,height = 0.2)

```

```{r}
#Q15
dataset_tourism$Gender <- as.factor(dataset_tourism$Gender)
ggplot(data = dataset_tourism, mapping = aes(x = Age, y = AnnualIncome, shape = Gender, colour = Gender)) + geom_point() + geom_jitter(width = 0.2,height = 0.2)

#Q16
ggplot(data = dataset_tourism, mapping = aes(x = Age, y = AnnualIncome, shape = Gender, colour = Gender)) + geom_point() + geom_jitter(width = 0.2,height = 0.2) + scale_colour_manual(values = c("blue","red"), name = " ") 

#Q17
ggplot(data = dataset_tourism, mapping = aes(x = Age, y = AnnualIncome, shape = Gender, colour = Gender)) + geom_point() + geom_jitter(width = 0.2,height = 0.2) + scale_colour_manual(values = c("blue","red"), name = " ") + scale_shape_manual(values = c(25, 15), name = " ")
```
```{r}
#Q18
install.packages("ggthemes")
library(ggthemes)

ggplot(data = dataset_tourism, mapping = aes(x = Age, y = AnnualIncome, shape = Gender, colour = Gender)) + 
  geom_point() + geom_jitter(width = 0.2,height = 0.2) +
  scale_colour_manual(values = c("#dd1c77","#43a2ca"), name = " ") +
  scale_shape_manual(values = c(17,19), name = " ") + labs(
    x = "Age (Category)",
    y = "Annual Income (Category)",
    title = "Distribution of Annual Income by Age",
    subtitle = "Coloured and shaped by Gender")+ 
  theme_clean()

```
```{r}
#Q19
ggplot(data = dataset_tourism, mapping = aes(x = Age, y = AnnualIncome, shape = Gender, colour = Gender)) + 
  geom_point() + geom_jitter(width = 0.2,height = 0.2) +
  scale_colour_manual(values = c("#dd1c77","#43a2ca"), name = " ") +
  scale_shape_manual(values = c(17,19), name = " ") + labs(
    x = "Age (Category)",
    y = "Annual Income (Category)",
    title = "Distribution of Annual Income by Age",
    subtitle = "Coloured and shaped by Gender") +
  xlim(0,5) + ylim(0,6) +
  theme_clean() + 
  theme(plot.title = element_text(hjust = 0.5, face = "bold"), # bold & centered
    plot.subtitle = element_text(hjust = 0.5, colour = "darkblue"), # softer subtitle, centered
    axis.text = element_text(colour = "black", size = 12), #clean readable axis numbers
    panel.background = element_rect(fill = "gray"),
    panel.grid.major.y = element_line(colour = "black", linetype = "dotted")) #subtle background and grid lines
```
```{r}
#Q20

ggplot(data = dataset_tourism, mapping = aes(x = Age, y = AnnualIncome, shape = Gender, colour = Gender)) + 
  geom_point() + geom_jitter(width = 0.2,height = 0.2, alpha = 0.4) +
  scale_colour_manual(values = c("#dd1c77","#43a2ca"), name = " ") +
  scale_shape_manual(values = c(17,19), name = " ") + labs(
    x = "Age (Category)",
    y = "Annual Income (Category)",
    title = "Distribution of Annual Income by Age",
    subtitle = "Coloured and shaped by Gender") +
  xlim(0,5) + ylim(0,6) +
  theme_clean() + 
  theme(plot.title = element_text(hjust = 0.5, face = "bold"), 
    plot.subtitle = element_text(hjust = 0.5, colour = "darkblue"), 
    axis.text = element_text(colour = "black", size = 12), 
    panel.background = element_rect(fill = "gray"),
    panel.grid.major.y = element_line(colour = "black", linetype = "dotted"), legend.position = "top")

```
Section C
```{r}
#Q21

narcissism_data <- read.table("Data (Dataverse).tab", header = TRUE, sep = "\t")

#Q22
ggplot(data = narcissism_data) + geom_histogram(mapping = aes(x = age), colour = "black", fill = "brown") 

#Q23
ggplot(data = narcissism_data) + geom_histogram(mapping = aes(x = age), colour = "black", fill = "brown") + scale_x_continuous(breaks = c(30,95)) #the plot remains the same even after changing the order

```
```{r}
#Q24

ggplot(data = narcissism_data) + geom_histogram(mapping = aes(x = age), colour = "black", fill = "brown", bins = 6) + scale_x_continuous(breaks = c(30,95))

ggplot(data = narcissism_data) + geom_histogram(mapping = aes(x = age), colour = "black", fill = "brown", binwidth = 6) + scale_x_continuous(breaks = c(30,95))

ggplot(data = narcissism_data) + geom_histogram(mapping = aes(x = age), colour = "black", fill = "brown", bins = 6, binwidth = 6) + scale_x_continuous(breaks = c(30,95)) #R chooses binwidth over bins

```
```{r}
#Q25

ggplot(data = narcissism_data, aes(x = age)) +
  geom_histogram(colour = "black", fill = "brown") +
  scale_y_continuous(limits = c(30, NA)) +
  labs( x = "Age of participants\n(R interprets NA as 'no limit' for that axis end)", y = "Count of participants")


```

```{r}
#Q26
#The warning "Removed N rows containing non-finite values" appeared because several observations in the age column were missing (NA). When ggplot2 creates the histogram, it automatically excludes these rows but issues a warning. To fix this, I created a cleaned dataset excluding missing age values. In Q25, the warning changed to "Removed N rows containing missing values or values outside the scale range" because setting ylim(c(30, NA)) filters out bars whose counts fall below 30.

ages <- which(!is.na(narcissism_data$age))
copy_narcissism_data <- narcissism_data[ages, ]


ggplot(copy_narcissism_data, aes(x = age)) +
  geom_histogram(colour = "black", fill = "brown", binwidth = 10) +
  coord_cartesian(ylim = c(30, NA)) + 
  labs(x = "Age\nR interprets NA as 'use default upper limit based on data'")

```
```{r}
#Q27

col_names <- colnames(copy_narcissism_data)
which(col_names == "count")
```
```{r}
#Q28

View(narcissism_data) #Since there are so many colunms, it is on a different page

P_openness <- ggplot(data = narcissism_data, mapping = aes(x = narq, y = opentoe)) + geom_point() + labs(x = "Narcissist Quotient", y = "Openness") +
  ggtitle("Openness vs Narcissism")


P_neuro <- ggplot(data = narcissism_data, mapping = aes(x = narq,y = neuro)) + geom_point() + labs(x = "Narcissist Quotient", y = "Neuroticism") +
  ggtitle("Neuroticism vs Narcissism")

P_agree <- ggplot(data = narcissism_data, mapping = aes(x = narq, y = agree)) +geom_point() + labs(x = "Narcissist Quotient", y = "Agreeableness") +
  ggtitle("Agreeableness vs Narcissism")

P_extro <- ggplot(data = narcissism_data, mapping = aes(x = narq, y = extro)) +geom_point() + labs(x = "Narcissist Quotient", y = "Extraversion") +
  ggtitle("Extraversion vs Narcissism")

P_cons <- ggplot(data = narcissism_data, mapping = aes(x = narq, y = cons)) +geom_point() + labs(x = "Narcissist Quotient", y = "Conscientiousness") +
  ggtitle("Conscientiousness vs Narcissism")

library(patchwork)

P_openness + P_neuro + P_agree + P_extro + P_cons

```
```{r}
#Q29

narcissism_data$male <- as.factor(narcissism_data$male)

P_openness <- ggplot(data = narcissism_data) + geom_point(mapping = aes(x = narq, y = opentoe, shape = male), colour = "blue", show.legend = F) + labs(x = "Narcissist Quotient", y = "Openness")

P_neuro <- ggplot(data = narcissism_data) + geom_point(mapping = aes(x = narq, y = neuro, shape = male), colour = "blue", show.legend = F) + labs(x = "Narcissist Quotient", y = "Neuroticsm") + labs(x = "Narcissist Quotient", y = "Openness")

P_agree <- ggplot(data = narcissism_data) + geom_point(mapping = aes(x = narq, y = agree, shape = male), colour = "blue", show.legend = F) + labs(x = "Narcissist Quotient", y = "Agreeableness")

P_extro <- ggplot(data = narcissism_data) + geom_point(mapping = aes(x = narq, y = extro, shape = male), colour = "blue", show.legend = F) + labs(x = "Narcissist Quotient", y = "Extraversion")

P_cons <- ggplot(data = narcissism_data) + geom_point(mapping = aes(x = narq, y = cons, shape = male), colour = "blue") + labs(x = "Narcissist Quotient", y = "Conscientiousness")

Combined_scatterplot <- (P_openness + P_neuro + P_agree) / (P_extro + P_cons) + plot_annotation(title = "Scatterplot of Narcissism Quotient vs Big Five Personality Traits", subtitle = "Different shapes represent gender (Male = 1, Female = 0)") & theme_clean() + theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14), plot.subtitle = element_text(hjust = 0.5, size = 12))
Combined_scatterplot
```
```{r}
#Q30

ggsave(filename = "Combined_scatterplot.tif", plot = Combined_scatterplot, device = "tiff", width = 10, height = 7)
```

Section D

```{r}
install.packages("languageR", dependencies = T)
```

```{r}
#Q31
library(languageR)

data("alice")

#Q32
adat <- as.data.frame(table(alice))

#Q33
ggplot(data = adat, mapping = aes(x = Freq)) + geom_histogram()

```

```{r}
#Q34

adat_new <- which(adat$Freq > 50)

adat_50 <- adat[adat_new, ]

#Q35
ggplot(data = adat_50, mapping = aes(x = Freq)) + geom_density() #The y axis becomes the density rather than the counts and goes into decimals under 1

```

```{r}
#Q36

ggplot(data = adat_50, mapping = aes(x = Freq)) + geom_freqpoly() 

#Density plot - smooth distributions across groups, a histogram - frequency distribution of a continuous variable and a frequency polygon to compare multiple distributions clearly on one graph

```

```{r}
#Q37

ggplot(data = adat_50, mapping = aes(x = Freq)) + geom_dotplot() 
#The width is the binwidth and each dot is one observation 
```

```{r}
#Q38
auto_binwidth <- sqrt(length(adat_50$Freq)) #found this rule of thumb online and thought of trying it to resolve the binwidth warning 

P1 <- ggplot(data = adat_50, mapping = aes(x = Freq)) + 
  geom_dotplot(stackdir = "up", method = "dotdensity", colour = "black", binwidth = auto_binwidth) + 
  ggtitle("stackdir = up, method = dotdensity")
P2 <- ggplot(data = adat_50, mapping = aes(x = Freq)) +
  geom_dotplot(stackdir = "down", method = "dotdensity", colour = "blue", binwidth = auto_binwidth) +
  ggtitle("stackdir = down, method = dotdensity")
P3 <- ggplot(data = adat_50, mapping = aes(x = Freq)) +
  geom_dotplot(stackdir = "center", method = "dotdensity", colour = "pink", binwidth = auto_binwidth) +
  ggtitle("stackdir = center, method = dotdensity")
P4 <- ggplot(data = adat_50, mapping = aes(x = Freq)) +
  geom_dotplot(stackdir = "centerwhole", method = "dotdensity", colour = "red", binwidth = auto_binwidth) +
  ggtitle("stackdir = centerwhole, method = dotdensity")
P5 <- ggplot(data = adat_50, mapping = aes(x = Freq)) +
  geom_dotplot(stackdir = "up", method = "histodot", colour = "yellow", binwidth = auto_binwidth) +
  ggtitle("stackdir = up, method = histodot")
P6 <- ggplot(data = adat_50, mapping = aes(x = Freq)) +
  geom_dotplot(stackdir = "down", method = "histodot", colour = "purple", binwidth = auto_binwidth) +
  ggtitle("stackdir = down, method = histodot")
P7 <- ggplot(data = adat_50, mapping = aes(x = Freq)) +
  geom_dotplot(stackdir = "center", method = "histodot", colour = "green", binwidth = auto_binwidth) +
  ggtitle("stackdir = center, method = histodot")
P8 <- ggplot(data = adat_50, mapping = aes(x = Freq)) +
  geom_dotplot(stackdir = "centerwhole", method = "histodot", colour = "lightblue", binwidth = auto_binwidth) +
  ggtitle("stackdir = centerwhole, method = histodot")

Combined_dotplot <- (P1 + P5) / (P2 + P6) / (P3 + P7) / (P4 + P8)

Combined_dotplot

```
```{r}
#Q39

data("beginningReaders")

ggplot(data = beginningReaders, mapping = aes(x = ReadingScore, y = Word)) + geom_point() + geom_rug()

#Q40 
ggplot(data = beginningReaders, mapping = aes(x = Word, y = ReadingScore)) + geom_point() + geom_rug() + theme(axis.text.x = element_text(angle = 90,size = 4))
```
Section E

```{r}
#Q41 & 42
install.packages("readxl", dependencies = T)
library(readxl)
excel_sheets("TFE_orangutans.xlsx")
Orangutan_dataset <- read_xlsx(path = "TFE_orangutans.xlsx", sheet = "nests")
View(Orangutan_dataset) #The first 9 rows is just additional information

#Q43
Orangutan_dataset <- read_xlsx(path = "TFE_orangutans.xlsx", sheet = "nests", skip = 9, col_names = T)
View(Orangutan_dataset)

```

```{r}
#Q44

ggplot(data = Orangutan_dataset, mapping = aes(x = field_name, y = Height_above_grou)) + geom_point() 
ggplot(data = Orangutan_dataset, mapping = aes(x = field_name, y = Height_above_grou)) + geom_area()
```

```{r}
#Q45

ggplot(data = Orangutan_dataset) + geom_ribbon(aes(x = field_name,ymin = Height_above_grou, ymax = Tree_height_m), fill = "darkorange") + ylab("Height")

ggplot(data = Orangutan_dataset) + geom_ribbon(aes(x = Tree_height_m,ymin = Height_above_grou, ymax = Tree_height_m), fill = "darkorange") + ylab("Height")

```
Section F
```{r}
library(dplyr)
data("storms")
#Q46
ggplot(data = storms) + geom_point(mapping = aes(x = long, y = lat, colour = name), show.legend = F) + guides(colour = "none") + labs(title = "Storm Tracks by Location", x = "Longitude", y = "Latitude") + theme(plot.title = element_text(hjust = 0.5, face = "bold")) #Chose latitude as x since it is horizontal and longitude as y since it is vertical 
```
```{r}
#Q47 & 48
start <- Sys.time()
ggplot(data = storms,aes(x = long, y = lat, colour = name)) + geom_tile(show.legend = F) + guides(colour = "none") + labs(title = "Storm Tracks by Location", x = "Longitude", y = "Latitude") + theme(plot.title = element_text(hjust = 0.5, face = "bold"))
end <- Sys.time()

end - start

start2 <- Sys.time()
ggplot(data = storms) + geom_raster(mapping = aes(x = long, y = lat, colour = name), show.legend = F) + guides(colour = "none") + labs(title = "Storm Tracks by Location", x = "Longitude", y = "Latitude") + theme(plot.title = element_text(hjust = 0.5, face = "bold"))
end2 <- Sys.time()

end2 - start2

```
```{r}
#Q48
install.packages("tictoc", dependencies = T)
library(tictoc)
```
```{r}
tic()
ggplot(data = storms, aes(x = long, y = lat, colour = name)) + geom_tile(show.legend = F) + guides(colour = "none") + labs(title = "Storm Tracks by Location", x = "Longitude", y = "Latitude") + theme(plot.title = element_text(hjust = 0.5, face = "bold"))
toc()
tic()
start2 <- Sys.time()
ggplot(data = storms) + geom_raster(mapping = aes(x = long, y = lat, colour = name), show.legend = F) + guides(colour = "none") + labs(title = "Storm Tracks by Location", x = "Longitude", y = "Latitude") + theme(plot.title = element_text(hjust = 0.5, face = "bold"))
toc() #raster is faster
```
```{r}
#Q49

ggplot(data = storms) +geom_line(mapping = aes(x = wind, y = pressure, group = name))

#Q50

ggplot(data = storms) + geom_line(mapping = aes(x = wind, y = pressure, group = name), alpha = 0.3, linewidth = 0.6, colour = "blue")

#Q51

ggplot(data = storms) + geom_line(mapping = aes(x = wind, y = pressure, group = name, linewidth = year), colour = "blue") #There are too many types so it cannot make unique lines and also makes the graph unreadable 

```
```{r}
#Q52
ggplot(data = storms) + geom_line(mapping = aes(x = wind, y = pressure, group = name), alpha = 0.3, linewidth = 0.6, colour = "red") + facet_wrap(.~category)

#Q53
ggplot(data = storms) + geom_line(mapping = aes(x = wind, y = pressure, group = name, colour = name), alpha = 0.3, linewidth = 0.6) + guides(colour = "none") + facet_wrap(.~category)
```
```{r}
#Q54
ggplot(data = storms) + geom_line(mapping = aes(x = wind, y = pressure, group = name, colour = name), alpha = 0.3, linewidth = 0.6) + guides(colour = "none") + facet_wrap(.~category, strip.position = "bottom") 
```
```{r}
#Q55
library(dplyr)
library(ggplot2)

final_plot <- ggplot(data = storms) + geom_line(mapping = aes(x = wind, y = pressure, group = name, linetype = status, colour = category), alpha = 0.3, linewidth = 0.6) + facet_grid(category ~ status, scales = "free_y") + guides(linetype = "none", colour = "none") + theme_minimal()

final_plot

ggsave("final_storm_plot_q55.png", plot = final_plot, device = "png",width = 16, height = 12)
```
Section G
```{r}

diversity_dataset <- read.csv("cleandata_main.csv")

```

```{r}
#Q56

tic()
ggplot(data = diversity_dataset) + geom_point(mapping = aes(x = age, y = days_minsen))
toc()

```

```{r}
skokie <- which(diversity_dataset$city == "Skokie")
diversity_dataset_skokie <- diversity_dataset[skokie, ]

#Q57
ggplot(data = diversity_dataset_skokie,aes(x = age, y = days_minsen)) + geom_point() + geom_hline(yintercept = 73.3*365) + geom_vline(xintercept = 18) + geom_vline(xintercept = 65) 

```
```{r}
#Q58

ggplot(data = diversity_dataset_skokie, aes(x = min_sent, y = max_sen)) + geom_point() + geom_abline(slope = 1, intercept = 0)

```
```{r}
#Q59

skockie_max_min <- which(diversity_dataset_skokie$min_sent < 1000000 & diversity_dataset_skokie$max_sen < 1000000)

skokie_dataset_new <- diversity_dataset_skokie[skockie_max_min, ]

#Q60

ggplot(data = skokie_dataset_new, aes(x = min_sent, y = max_sen)) + geom_point() + geom_smooth(method = "lm")

#Q61

ggplot(data = skokie_dataset_new, aes(x = min_sent, y = max_sen)) + geom_point() + geom_smooth(method = "gam")
```
```{r}
#Q62
P_lm <- ggplot(data = skokie_dataset_new, aes(x = min_sent, y = max_sen)) + geom_point() + geom_smooth(method = "lm", se = TRUE) + ggtitle("Linear Regression Fit (LM)") 

P_gam <- ggplot(data = skokie_dataset_new, aes(x = min_sent, y = max_sen)) + geom_point() + geom_smooth(method = "gam", se = TRUE) + ggtitle("Generalized Additive Model (GAM)")

Combined_smoothplot <- P_lm + P_gam
Combined_smoothplot
```
```{r}
#Q63

ggsave("combined_smoothplot_dpi_72.png", Combined_smoothplot, dpi = 72)
ggsave("combined_smoothplot_dpi_150.png", Combined_smoothplot, dpi = 150)
ggsave("combined_smoothplot_dpi_300.png", Combined_smoothplot, dpi = 300)
ggsave("combined_smoothplot_dpi_600.png", Combined_smoothplot, dpi = 600)

ggsave("combined_smoothplot_2x3.png", Combined_smoothplot, width = 2, height = 3, units = "in", dpi = 300)
ggsave("combined_smoothplot_4x5.png", Combined_smoothplot, width = 4, height = 5, units = "in", dpi = 300)
ggsave("combined_smoothplot_8x12.png", Combined_smoothplot, width = 8, height = 12, units = "in", dpi = 300) #The font gets smaller as the size gets bigger

```
```{r}
#Q64

skokie_race <- skokie_dataset_new %>% 
  group_by(d_race) %>% 
  summarise(n_race = n())

skokie_race

ggplot(skokie_race, aes(x = d_race, y = n_race, fill = d_race)) +
  geom_col(show.legend = F) +
  labs(
    x = "Defendant Race",
    y = "Number of Cases",
    title = "Number of Cases per Race in Skokie") +
  theme_clean() + coord_flip()

```
```{r}
#Q65
ggplot(data = skokie_race) + geom_bar(mapping = aes(x = d_race, y = n_race), stat = "identity") + coord_flip()

ggplot(data = skokie_dataset_new) + geom_bar(mapping = aes(x = d_race), stat = "count") + coord_flip()

```
```{r}
#Q66

skokie_dataset_new$prev_charge <- as.factor(skokie_dataset_new$prev_charge)

ggplot(data = skokie_dataset_new) + geom_bar(mapping = aes(x = d_race, fill = prev_charge), stat = "count") + coord_flip() + ggtitle("Bar chart (default)") + theme(plot.title = element_text(hjust = 0.5)) #Default is stacked

ggplot(data = skokie_dataset_new) + geom_bar(mapping = aes(x = d_race, fill = prev_charge), stat = "count", position = "dodge") + coord_flip() + ggtitle("Bar chart with position Dodge") + theme(plot.title = element_text(hjust = 0.5))

ggplot(data = skokie_dataset_new) + geom_bar(mapping = aes(x = d_race, fill = prev_charge), stat = "count", position = "stack") + coord_flip() + ggtitle("Bar chart with position Stack") + theme(plot.title = element_text(hjust = 0.5))

ggplot(data = skokie_dataset_new) + geom_bar(mapping = aes(x = d_race, fill = prev_charge), stat = "count", position = "fill") + coord_flip() + ggtitle("Bar chart with position Fill") + theme(plot.title = element_text(hjust = 0.5))

#Q67

#Standard Deviation (SD) measures the spread of data points within a single sample, showing how much individual values differ from the average. Standard Error (SE) estimates how much the mean of your sample might differ from the true mean of the entire population. SD is the comparison of individual values with the mean while SE is the comparison of sample mean with the population mean

```
Section H
```{r}
#Q67

Croc_dataset <- read.csv("crocodile_dataset.csv")
Croc_dataset <- Croc_dataset %>%
  rename(Length_m = Observed.Length..m., Weight_kg = Observed.Weight..kg.)


ggplot(data = Croc_dataset) + geom_point(mapping = aes(x = Length_m, y = Weight_kg, colour = Genus)) + scale_colour_manual(values = c("Crocodylus" = "red", "Mecistops" = "skyblue", "Osteolaemus" = "violet"))

#Q68
ggplot(data = Croc_dataset) + geom_point(mapping = aes(x = Length_m, y = Weight_kg, colour = Genus)) + scale_colour_manual(values = c("Crocodylus" = "red", "Mecistops" = "skyblue", "Osteolaemus" = "violet")) + coord_flip()


```

```{r}
#Q69
ggplot(data = Croc_dataset) + geom_point(mapping = aes(x = Length_m, y = Weight_kg, colour = Genus)) + scale_colour_manual(values = c("Crocodylus" = "red", "Mecistops" = "skyblue", "Osteolaemus" = "violet")) + coord_trans(y = "log10")

ggplot(data = Croc_dataset) + geom_point(mapping = aes(x = Length_m, y = Weight_kg, colour = Genus)) + scale_colour_manual(values = c("Crocodylus" = "red", "Mecistops" = "skyblue", "Osteolaemus" = "violet")) + scale_y_log10()

ggplot(data = Croc_dataset) + geom_point(mapping = aes(x = Length_m, y = Weight_kg, colour = Genus)) + scale_colour_manual(values = c("Crocodylus" = "red", "Mecistops" = "skyblue", "Osteolaemus" = "violet")) + coord_trans(y = "log10") + scale_y_log10()
```

```{r}
#Q70
Croc_summary <- Croc_dataset %>%
  group_by(Conservation.Status) %>%
  summarise(
    mean_length = mean(Length_m, na.rm = TRUE),
    sd_length = sd(Length_m, na.rm = TRUE),
    median_length = median(Length_m, na.rm = TRUE),
    mean_weight = mean(Weight_kg, na.rm = TRUE),
    sd_weight = sd(Weight_kg, na.rm = TRUE),
    median_weight = median(Weight_kg, na.rm = TRUE),
    n_species = n())

Croc_summary

P_croc_Len <- ggplot(data = Croc_summary) + geom_pointrange(mapping = aes(x = Conservation.Status, y = mean_length,ymin = mean_length - sd_length, ymax = mean_length + sd_length), colour = "blue") + ggtitle("Mean Crocodile Length") + theme(plot.title = element_text(hjust = 0.5))
P_croc_Len

P_croc_wt <- ggplot(data = Croc_summary) + geom_pointrange(mapping = aes(x = Conservation.Status, y = mean_weight,ymin = mean_weight - sd_weight, ymax = mean_weight + sd_weight), colour = "blue") + ggtitle("Mean Crocodile Weight") + theme(plot.title = element_text(hjust = 0.5))
P_croc_wt

P_croc_point_combined <- P_croc_Len + P_croc_wt
P_croc_point_combined 

```
```{r}
#Q71
#geom_linearage
P_croc_Len2 <- ggplot(data = Croc_summary) + geom_linerange(mapping = aes(x = Conservation.Status, y = mean_length,ymin = mean_length - sd_length, ymax = mean_length + sd_length)) + ggtitle("Mean Crocodile Length") + theme(plot.title = element_text(hjust = 0.5))
P_croc_Len2

P_croc_wt2 <- ggplot(data = Croc_summary) + geom_linerange(mapping = aes(x = Conservation.Status, y = mean_weight,ymin = mean_weight - sd_weight, ymax = mean_weight + sd_weight)) + ggtitle("Mean Crocodile Weight") + theme(plot.title = element_text(hjust = 0.5))
P_croc_wt

P_croc_point_combined2 <- P_croc_Len2 + P_croc_wt2
P_croc_point_combined2 

#geom_errorbar()
P_croc_Len3 <- ggplot(data = Croc_summary) + geom_errorbar(mapping = aes(x = Conservation.Status, y = mean_length, ymin = mean_length - sd_length, ymax = mean_length + sd_length), colour = "red") + ggtitle("Mean Crocodile Length") + theme(plot.title = element_text(hjust = 0.5))
P_croc_Len3

P_croc_wt3 <- ggplot(data = Croc_summary) + geom_errorbar(mapping = aes(x = Conservation.Status, y = mean_weight,ymin = mean_weight - sd_weight, ymax = mean_weight + sd_weight), colour = "red") + ggtitle("Mean Crocodile Weight") + theme(plot.title = element_text(hjust = 0.5))
P_croc_wt3

P_croc_point_combined3 <- P_croc_Len3 + P_croc_wt3
P_croc_point_combined3

#geom_crossbar()
P_croc_Len4 <- ggplot(data = Croc_summary) + geom_crossbar(mapping = aes(x = Conservation.Status, y = mean_length,ymin = mean_length - sd_length, ymax = mean_length + sd_length), colour = "green") + ggtitle("Mean Crocodile Length") + theme(plot.title = element_text(hjust = 0.5))
P_croc_Len4

P_croc_wt4 <- ggplot(data = Croc_summary) + geom_crossbar(mapping = aes(x = Conservation.Status, y = mean_weight,ymin = mean_weight - sd_weight, ymax = mean_weight + sd_weight), colour = "green") + ggtitle("Mean Crocodile Weight") + theme(plot.title = element_text(hjust = 0.5))
P_croc_wt4

P_croc_point_combined4 <- P_croc_Len4 + P_croc_wt4
P_croc_point_combined4
```
```{r}
P_giant <- ((P_croc_Len + P_croc_wt + P_croc_point_combined) /
  (P_croc_Len2 + P_croc_wt2 + P_croc_point_combined2) /
  (P_croc_Len3 + P_croc_wt3 + P_croc_point_combined3) /
  (P_croc_Len4 + P_croc_wt4 + P_croc_point_combined4))
P_giant

```
Section I
```{r}
#Q72
data("starwars")

P_starwars <- ggplot(data = starwars) + geom_point(mapping = aes(x = height, y = mass)) + labs(x = "Height (cm)", y = "Mass(Kg)")
P_starwars
P_starwars2 <- ggplot(data = starwars) + geom_point(mapping = aes(x = height/100, y = mass*1000)) + labs(x = "Height (m)", y = "Mass(g)")
P_starwars2
P_starwars + P_starwars2
```

```{r}
#Q73

ggplot(starwars, aes(x = height, y = mass, group = birth_year)) + geom_point() + geom_line(colour = "blue") + labs(title = "Data and aesthetics in ggplot()") 

ggplot() + geom_point(data = starwars, aes(x = height, y = mass)) + geom_line(data = starwars, aes(x = height, y = mass, group = birth_year), colour = "blue") + labs(title = "Data and aesthetics in each geom") 
  
ggplot(starwars) + geom_point(aes(x = height, y = mass)) + geom_line(aes(x = height, y = mass, group = birth_year), colour = "blue") + labs(title = "Data in parent, aesthetics in geoms") 

#Q74
ggplot(starwars, aes(x = height)) + geom_point(aes(y = mass)) + geom_line(aes(y = mass, group = birth_year)) #you can because it considers x globally for each layer and y can be locally changed 

```

```{r}
#Q75
library(beepr)
beep()
```


